import requests
from urllib.parse import urlencode
from urllib.parse import quote
from pyquery.pyquery import PyQuery as pq
import pymongo
import re
PROJECT_NAME = 'Powerdns-Authoritative'
DB_PROJECT_NAME = 'pdns'
VENDER_ID = 2834
PROJECT_ID =9195
HOST = '172.18.108.169'
PORT = 21087

Client =pymongo.MongoClient(host=HOST,port =PORT)
db = Client[DB_PROJECT_NAME]
base_url = 'https://www.cvedetails.com'
headers = {
    'host': 'www.cvedetails.com',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',
}
CVE=[]
def get_index_page(vender_id,product_id,product_name):

    url = base_url+'/vulnerability-list/vendor_id-'+str(vender_id)+'/'+'product_id-'+str(product_id)+'/'+product_name+'.html'
    print(url)
    try:
        response = requests.get(url,headers=headers)
        if response.status_code ==200:
            return response.text
    except requests.ConnectionError as e:
        print('error:',e.args)

def get_page_url(content):
    doc = pq(content)
    items = doc('.paging')
    total = items.find('b').text()
    print(total)
    items = items.find('a').items()
    hrefs=[]
    for item in items:
        print(item.attr('href'))
        hrefs.append(item.attr('href'))
    return hrefs

def get_cve_index(href):
    try:
        url = base_url + str(href)
        print(url)
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            context = response.text
            doc = pq(context)
            items = doc('#vulnslisttable .srrowns').items()
            for item in items:
                tds = item.find('td')
                context = tds.text().split(' ')
                context.remove('')
                print(context)
                for i in range(len(context)):
                    context[i] = str(context[i])
                varams = {
                    "CVE_ID": context[1],
                    "CWE_ID": context[2],
                    'Vulnerability Type': context[3],
                    "Publish Date": context[4],
                    "Update Date": context[5],
                    "CVSS Score": context[6],
                    "Gained Access Level": context[7],
                    "Access": context[8],
                    "Complexity": context[9],
                    "Authentication": context[10],
                    "Conf": context[11],
                    "Integ": context[12],
                    "Avail": context[13],

                }
                CVE.append(varams)
    except requests.ConnectionError as e:
        print('Error:', e.args)


def get_cve_details(cve):
    if cve:
        id = cve['CVE_ID']
        url = base_url+'/cve/'+str(id)+'/'
        print(url)
        try:
            response= requests.get(url,headers=headers)
            if response.status_code == 200:
                doc = pq(response.text)
                result = re.match('(.*?)Publish Date.*?',doc('#cvedetails .cvedetailssummary').text(),re.S)
                details = re.sub('\n','',result.group(1))
                cve['Details']=details
                print(cve['Details'])
                addvend_suppdata=[]
                selector = doc('#addvendsuppdata .listtable tr')
                if(selector.length>0):
                    addvend_suppdata_items = list(selector.items())
                    for i in range(1,len(addvend_suppdata_items)):
                        td = addvend_suppdata_items[i].find('td').items()
                        context = []
                        for item in td:
                            if (item.find('a').length > 0):
                                context.append(str(item.find('a').text()))
                            else:
                                context.append(str(item.text()))

                        print(context)
                        varams={
                            'Vendor':context[0],
                            'Impact': context[1],
                            'CVSS Score': context[2],
                            'CVSS Vector': context[3],
                            'Report Date': context[4],
                            'Publish Date': context[5],
                        }
                        addvend_suppdata.append(varams)
                cve['addvend_suppdata']=addvend_suppdata
                print(cve['addvend_suppdata'])

                vuln_prods_table = []
                selector = doc('#vulnprodstable tr')
                if (selector.length > 0):
                    vuln_prods_table_items = list(selector.items())
                    for i in range(1, len(vuln_prods_table_items)):
                        td = vuln_prods_table_items[i].find('td').items()
                        context=[]
                        for item in td:
                            if (item.find('a').length>0):
                                context.append(str(item.find('a').text()))
                            else:
                                context.append(str(item.text()))

                        print(context)
                        varams = {
                            'Product Type': context[1],
                            'Vendor': context[2],
                            'Product': context[3],
                            'Version': context[4],
                            'Update': context[5],
                            'Edition': context[6],
                            'Language': context[7],

                        }

                        vuln_prods_table.append(varams)
                cve['vuln_prods_table'] = vuln_prods_table
                print(cve['vuln_prods_table'])
                oval_defs_maindiv = []
                selector = doc('#ovaldefsmaindiv .minheightdiv .listtable tr')
                if (selector.length > 0):
                    oval_defs_maindiv_items = list(selector.items())
                    for i in range(1, len(oval_defs_maindiv_items)):
                        td = oval_defs_maindiv_items[i].find('td').items()
                        context = []
                        for item in td:
                            if (item.find('a').length > 0):
                                ref={}
                                ref['label']=str(item.find('a').text())
                                ref['url']=str(item.find('a').attr('href'))
                                context.append(ref)

                            else:
                                context.append(str(item.text()))

                        print(context)
                        varams = {
                            'Title': context[0],
                            'Definition Id': context[1],
                            'Class': context[2],
                            'Family': context[3],

                        }

                        oval_defs_maindiv.append(varams)
                cve['oval_defs_maindiv'] = oval_defs_maindiv
                print(cve['oval_defs_maindiv'])
                vuln_refs_table = []
                selector = doc('#vulnrefstable tr')
                if (selector.length > 0):
                    vuln_refs_table_items = list(selector.items())
                    for i in range(0, len(vuln_refs_table_items)):
                        td = vuln_refs_table_items[i].find('td').items()
                        context = []
                        for item in td:
                            if (item.find('a').length > 0):
                                context.append(str(item.find('a').text()))
                            else:
                                context.append(str(item.text()))

                        print(context)
                        varams = context[0]

                        vuln_refs_table.append(varams)
                cve['vuln_refs_table'] = vuln_refs_table
                print(cve['vuln_refs_table'])

        except requests.ConnectionError as e:
            print('error:',e.args)
        finally:
            return cve



def save_to_mongodb(json):
    if db.cve_details.find({'id':str(json['CVE_ID'])}).count()==0:
        db.cve_details.insert_one(json)

if __name__ == '__main__':
    result = get_index_page(VENDER_ID,PROJECT_ID,PROJECT_NAME)
    urls = get_page_url(result)
    for url in urls:
        get_cve_index(url)
    for item in CVE:
        save_to_mongodb(get_cve_details(item))


















